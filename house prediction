import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import mpl_toolkits
%matplotlib inline

df = pd.read_csv("/kaggle/input/house-price-prediction-seattle/train.csv")

df.head()

df.describe()
df['lot_size_units'] = df.apply(lambda row: row['lot_size'] * 43560 if row['lot_size_units'] == 'acre' else row['lot_size'], axis=1)

# convert size_units column to numeric
def convert_size_units(x):
    if x == 'sqft':
        return 1.0
    elif x == 'acre':
        return 43560.0 # 1 acre = 43,560 square feet
    else:
        return float('nan')

df['size_units'] = df['size_units'].map(convert_size_units)

#drop dups, null values
df.drop_duplicates(inplace=True)
df.dropna(inplace=True)
# df.drop(columns=['lot_size_units'], inplace=True)
df.head()
df.shape

#check for categorical variables
obj = (df.dtypes == 'object')
object_cols = list(obj[obj].index)
print("Categorical variables:",len(object_cols))

int_ = (df.dtypes == 'int')
num_cols = list(int_[int_].index)
print("Integer variables:",len(num_cols))

fl = (df.dtypes == 'float')
fl_cols = list(fl[fl].index)
print("Float variables:",len(fl_cols))

df.info()
#Check missing values
df.isnull().sum()
#EDA Analysis 
#correlation independednt and dependent features
#check for multi corr
df.corr()
plt.figure(figsize=(12, 6))
sns.heatmap(df.corr(),
			cmap = 'BrBG',
			fmt = '.2f',
			linewidths = 2,
			annot = True)

#hist will plot for all 
import matplotlib.pyplot as plt
df.hist(bins=10, figsize=(15,16))
plt.show()
import seaborn as sns
sns.pairplot(df)
import seaborn as sns
sns.regplot(x='size',y='price',data=df)
#prepare independent and dependent features dividing
X = df.iloc[:, :-1] # select all columns except the last one (price)

# select the target variable using iloc
Y = df.iloc[:, -1] 
df['size_units']
X.head()
Y.head()
from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(X,Y)

new_house = [[3, 2.5, 2590.0, 1.0,6000.00, 6000.0, 98144]]
predicted_price = model.predict(new_house)

print("Predicted price:", predicted_price[0])
print(model.coef_)
#-133652.7190394 is the decrease in price value w respect to beds ?
from sklearn.metrics import r2_score
from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(df.iloc[:, :-1], df.iloc[:, -1], test_size=0.2, random_state=42)

# fit a linear regression model on the training set
reg = LinearRegression()
reg.fit(X_train, Y_train)

# evaluate the model's performance on the testing set using R^2
Y_pred = reg.predict(X_test)
r2 = r2_score(Y_test, Y_pred)
print('R^2 score:', r2)
from sklearn.metrics import mean_squared_error
y_pred = model.predict(X_test)
rmse = mean_squared_error(Y_test, y_pred, squared=False)
print("RMSE:", rmse)
